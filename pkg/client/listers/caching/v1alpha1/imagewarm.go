/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/cache-imagewarm/pkg/apis/caching/v1alpha1"
)

// ImageWarmLister helps list ImageWarms.
// All objects returned here must be treated as read-only.
type ImageWarmLister interface {
	// List lists all ImageWarms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageWarm, err error)
	// ImageWarms returns an object that can list and get ImageWarms.
	ImageWarms(namespace string) ImageWarmNamespaceLister
	ImageWarmListerExpansion
}

// imageWarmLister implements the ImageWarmLister interface.
type imageWarmLister struct {
	indexer cache.Indexer
}

// NewImageWarmLister returns a new ImageWarmLister.
func NewImageWarmLister(indexer cache.Indexer) ImageWarmLister {
	return &imageWarmLister{indexer: indexer}
}

// List lists all ImageWarms in the indexer.
func (s *imageWarmLister) List(selector labels.Selector) (ret []*v1alpha1.ImageWarm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageWarm))
	})
	return ret, err
}

// ImageWarms returns an object that can list and get ImageWarms.
func (s *imageWarmLister) ImageWarms(namespace string) ImageWarmNamespaceLister {
	return imageWarmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageWarmNamespaceLister helps list and get ImageWarms.
// All objects returned here must be treated as read-only.
type ImageWarmNamespaceLister interface {
	// List lists all ImageWarms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageWarm, err error)
	// Get retrieves the ImageWarm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageWarm, error)
	ImageWarmNamespaceListerExpansion
}

// imageWarmNamespaceLister implements the ImageWarmNamespaceLister
// interface.
type imageWarmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageWarms in the indexer for a given namespace.
func (s imageWarmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImageWarm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageWarm))
	})
	return ret, err
}

// Get retrieves the ImageWarm from the indexer for a given namespace and name.
func (s imageWarmNamespaceLister) Get(name string) (*v1alpha1.ImageWarm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagewarm"), name)
	}
	return obj.(*v1alpha1.ImageWarm), nil
}
