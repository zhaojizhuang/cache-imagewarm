# Copyright 2021 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cache-imagewarm
  namespace: knative-serving
  labels:
    k8s-app: cache-imagewarm
spec:
  selector:
    matchLabels:
      name: cache-imagewarm
  template:
    metadata:
      labels:
        name: cache-imagewarm
    spec:
      serviceAccountName: cache-imagewarm
      containers:
      - name: warmer
        # This is the Go import path for the binary that is containerized
        # and substituted here.
        image: ko://knative.dev/cache-imagewarm/cmd/warmer
        args:
        - --disable-ha=true
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 1000m
            memory: 1000Mi
        ports:
        - name: metrics
          containerPort: 9090
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/caching
        volumeMounts:
          - mountPath: /var/run/docker.sock
            name: runtime-socket
            readOnly: true
        securityContext:
          allowPrivilegeEscalation: true
          readOnlyRootFilesystem: true
          runAsNonRoot: false
      volumes:
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: runtime-socket
